<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Choisissez une plage disponible</title>
    <link rel="stylesheet" href="/css/agenda.css">
</head>
<body>
    <%- include('header'); -%>
    <h1>Choisissez une plage disponible</h1>
    
    <div class="datepicker">
        <!-- Barre de navigation mois/année -->
        <div class="datepicker-top">
            <div class="month-selector">
                <button class="arrow" aria-label="Mois précédent">
                    <span>&lt;</span>
                </button>
                <span class="month-name" aria-live="polite"></span>
                <button class="arrow" aria-label="Mois suivant">
                    <span>&gt;</span>
                </button>
            </div>
        </div>

        <!-- Conteneur du calendrier -->
        <div class="datepicker-calendar">
        </div>
    </div>

    <div class="price-container">
        <h2>Prix prévisionnel</h2>
        <p id="price">Sélectionnez une plage</p>
        <div class="button-container">
            <button id="back-home-btn" style="display: none;">Valider</button>
        </div>
        
    </div>
    
    <%- include('footer'); -%>

    <script src="/js/agenda.js" defer></script>
</body>
</html>

<script>

document.addEventListener("DOMContentLoaded", () => {
    const monthName = document.querySelector(".month-name");
    const arrows = document.querySelectorAll(".arrow");
    const priceDisplay = document.getElementById("price");

    const pricePerDay = <%= produit.prix_location %>; 

    const backHomeBtn = document.getElementById("back-home-btn");

    const months = [
        "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", 
        "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"
    ];    

    let currentDate = new Date();
    let selectedRange = { start: null, end: null };

    // Dates de début et de fin louées
    const dateDebutLoue = new Date("<%= produit.date_debut_loue %>");
    const dateFinLoue = new Date("<%= produit.date_fin_loue %>");

    // Affiche mois/année
    function updateMonthDisplay() {
        const month = currentDate.getMonth();
        const year = currentDate.getFullYear();
        monthName.textContent = `${months[month]} ${year}`;
    }

    // Génère le calendrier
    function generateCalendar() {
        const calendar = document.querySelector(".datepicker-calendar");
        const month = currentDate.getMonth();
        const year = currentDate.getFullYear();

        // Obtenir le premier jour
        const firstDay = new Date(year, month, 1).getDay();
        // Obtenir le nombre de jours dans le mois
        const daysInMonth = new Date(year, month + 1, 0).getDate();

        // Obtenir le nombre de jours du mois précédent
        const prevMonthDays = new Date(year, month, 0).getDate();

        // Ajouter les jours du mois précédent grisé
        for (let i = firstDay - 1; i >= 0; i--) {
            const day = prevMonthDays - i;
            const date = new Date(year, month - 1, day);
            const button = createDateButton(date, true);
            calendar.appendChild(button);
        }

        // Ajouter les jours du mois actuel
        for (let day = 1; day <= daysInMonth; day++) {
            const date = new Date(year, month, day);
            const button = createDateButton(date, false);
            calendar.appendChild(button);
        }

        // Ajouter les jours du mois suivant grisé
        const nextMonthStartDay = (firstDay + daysInMonth) % 7;
        for (let day = 1; day <= (7 - nextMonthStartDay) % 7; day++) {
            const date = new Date(year, month + 1, day);
            const button = createDateButton(date, true);
            calendar.appendChild(button);
        }

        highlightRange();
    }

    // Formate en YYYY-MM-DD
    function formatDateLocal(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const day = String(date.getDate()).padStart(2, "0");
        return `${year}-${month}-${day}`;
    }

    function createDateButton(date, faded) {
        const button = document.createElement("button");
        button.classList.add("date");
        if (faded) button.classList.add("faded");
        button.textContent = date.getDate();
        button.dataset.date = formatDateLocal(date);

        // Comparaison avec les dates louées
        if (formatDateLocal(date) === formatDateLocal(dateDebutLoue)) {
            button.classList.add("start-loue");
        }
        if (formatDateLocal(date) === formatDateLocal(dateFinLoue)) {
            button.classList.add("end-loue");
        }
        if (date > dateDebutLoue && date < dateFinLoue) {
            button.classList.add("in-loue");
        }

        button.addEventListener("click", () => handleDateClick(date));
        return button;
    }

    // Gestion du clic pour sélectionner une plage de dates
    function handleDateClick(date) {
        // Si aucune plage ou si la plage est déjà complète, réinitialise
        if (!selectedRange.start || (selectedRange.start && selectedRange.end)) {
            selectedRange = { start: date, end: null };

          // Si la date cliquée est avant le début, la définir comme début
        } else if (date < selectedRange.start) {
            
            selectedRange = { start: date, end: selectedRange.start };
        
          // Sinon, définir comme fin de plage
        } else {
          
            selectedRange.end = date;
        }

        highlightRange();
        updatePrice();
    }

    // Met en couleur la plage sélectionnée
    function highlightRange() {
    const allDates = document.querySelectorAll(".date");

    allDates.forEach((button) => {
        const buttonDate = new Date(button.dataset.date); 
        button.classList.remove("range-start", "range-end", "in-range"); // On rénitialise

        // Ajouter la classe pour le début de la plage
        if (selectedRange.start && buttonDate.getTime() === selectedRange.start.getTime()) {
            button.classList.add("range-start");
        }

        // Ajouter la classe pour la fin de la plage
        // Bug ici, ne met pas en surbrillance le dernier jour
        if (selectedRange.end && buttonDate.getTime() === selectedRange.end.getTime()) {
            button.classList.add("range-end");
        }

        // Ajouter la classe pour les dates intermédiaires
        if ( selectedRange.start && selectedRange.end && buttonDate.getTime() >= selectedRange.start.getTime() && buttonDate.getTime() <= selectedRange.end.getTime() ) {
            button.classList.add("in-range");
        }
    });
}


    
    function updatePrice() {
        if (selectedRange.start && selectedRange.end) {
            let days = 0;
            let currentDate = new Date(selectedRange.start);

            // Parcours des jours de la plage
            while (currentDate <= selectedRange.end) {
                if (currentDate < dateDebutLoue || currentDate > dateFinLoue) {
                    days++;
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }


            // Calcul du prix

            let totalPrice = pricePerDay; // Coût fixe
            
            if (days > 3) {
                const extraDays = days - 3;

                if (extraDays <= 4) {
                    // Jours 4 à 7 inclus : 4 % + prix fixe
                    totalPrice += extraDays * (pricePerDay + pricePerDay * 0.04);
                } 
                else if (extraDays <= 11) {
                    // Jours 8 à 14 inclus : 4 % pour les 4 premiers jours, puis 2 % pour les suivants
                    totalPrice += 4 * (pricePerDay + pricePerDay * 0.04); // Jours 4 à 7
                    totalPrice += (extraDays - 4) * (pricePerDay + pricePerDay * 0.02); // Jours 8 à 14
                } 
                else {
                    // Jours 15+ : 4 % pour 4 jours, 2 % pour 7 jours, 1 % pour les suivants
                    totalPrice += 4 * (pricePerDay + pricePerDay * 0.04); // Jours 4 à 7
                    totalPrice += 7 * (pricePerDay + pricePerDay * 0.02); // Jours 8 à 14
                    totalPrice += (extraDays - 11) * (pricePerDay + pricePerDay * 0.01); // Jours 15+
                }
            }

            // Affichage du prix
            totalPrice = Math.floor(totalPrice * 100) / 100; // Arrondi à l'avantage du client
            priceDisplay.textContent = `Prix prévisionnel : ${totalPrice.toFixed(2)}€ (${days} jours)`;

            // Affiche le bouton si une plage est choisie
            backHomeBtn.style.display = "block";
        } else {
            priceDisplay.textContent = "Sélectionnez une plage";
            backHomeBtn.style.display = "none";
        }
    }

    // Redirection au clic sur le bouton
    backHomeBtn.addEventListener("click", () => {
        window.location.href = "/"; // Redirige vers la page d'accueil
    });

    
    // Navigation précédent/suivant
    arrows.forEach((arrow, index) => {
    arrow.addEventListener("click", () => {
        // Si flèche gauche on recule d'un mois
        if (index === 0) {
            currentDate.setMonth(currentDate.getMonth() - 1);
        // Si flèche droite on avance d'un mois
        } else {
            currentDate.setMonth(currentDate.getMonth() + 1); 
        }

        updateMonthDisplay();

        // On efface les anciennes dates avant de générer un nouveau calendrier
        const calendar = document.querySelector(".datepicker-calendar");
        calendar.innerHTML = "";

        generateCalendar();
    });
});



    updateMonthDisplay();
    generateCalendar();
});


    

</script>
